#__author__ = "Marcel C. Hagner, "Alexey Pasumansky"
#__copyright__ = "Copyright 2016, LAD@RPS and MCH"
#__credits__ = ["Marcel C. Hagner", "Przemysław P. Sikora"]
#__license__ = "GPL3"
#__version__ = "1.4.0"
#__maintainer__ = "Marcel C. Hagner"
#__email__ = "hagner.archaeo@gmx.de"
#__status__ = "Prototype"
# Compatibility - PhotoScan Professional 1.1.3

# Das HASP-AUTO-Skript V.1.4 MCH  LAD@RPS 2016

# Alle benötigten Programme werden importiert bzw. gestartet
import os
import time
import random
import PhotoScan
from PySide import QtCore, QtGui
# Hier wird AUTOskriptdlg definiert, dass am Schluss wichtig für den Photoscan-Tab HagnerArchaeoTools ist
class AUTOskriptdlg(QtGui.QDialog):

	def __init__(self, parent):
	
		QtGui.QDialog.__init__(self, parent)
		
		self.blend_types = {"Average": PhotoScan.BlendingMode.AverageBlending, "Mosaic": PhotoScan.BlendingMode.MosaicBlending, "Min intensity": PhotoScan.BlendingMode.MinBlending, "Max Intensity": PhotoScan.BlendingMode.MaxBlending}

		self.setWindowTitle("HASP-AUTO-Skript V.2.0")
		
		self.resTxt = QtGui.QLabel()
		self.resTxt.setText("Das HASP-AUTO-Skript.")
		self.resTxt.setFixedSize(130,40)	
		
		self.btnQuit = QtGui.QPushButton("Quit")
		self.btnQuit.setFixedSize(130,40)
		self.btnQuit.setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')
		
		self.btnP1 = QtGui.QPushButton("Niedrig")
		self.btnP1.setFixedSize(130,40)
		
		self.btnP2 = QtGui.QPushButton("Mittel")
		self.btnP2.setFixedSize(130,40)
		
		self.btnP3 = QtGui.QPushButton("Hoch")
		self.btnP3.setFixedSize(130,40)
							
		layout = QtGui.QGridLayout()
		layout.addWidget(self.resTxt, 0, 0)		
		layout.addWidget(self.btnP1, 2, 1)
		layout.addWidget(self.btnP2, 2, 2)
		layout.addWidget(self.btnP3, 2, 3)
		layout.addWidget(self.btnQuit, 3, 3)
		self.setLayout(layout)  
	
		proc_low = lambda : self.Auto_script_Workflow_low()
		proc_med = lambda : self.Auto_script_Workflow_medium()
		proc_hig = lambda : self.Auto_script_Workflow_high()
		
		QtCore.QObject.connect(self.btnP1, QtCore.SIGNAL("clicked()"), proc_low)
		QtCore.QObject.connect(self.btnP2, QtCore.SIGNAL("clicked()"), proc_med)
		QtCore.QObject.connect(self.btnP3, QtCore.SIGNAL("clicked()"), proc_hig)
		QtCore.QObject.connect(self.btnQuit, QtCore.SIGNAL("clicked()"), self, QtCore.SLOT("reject()"))	

		self.exec()		
		
	def Auto_script_Workflow_low(self):	
			import PhotoScan, os #Starte Photoscan
		
			path = PhotoScan.app.getExistingDirectory("Bitte wählen Sie den Zielordner mit den gesammelten *.psz Projekten") # Waehle den Pfad aus
			chunk = PhotoScan.app.document.chunk # der Chunk wird definiert
			print("HASP_AUTO_Skript LOW startet (C) M_C_HAGNER 2015")
			doc = PhotoScan.app.document
			crs = PhotoScan.app.getCoordinateSystem("Wählen Sie das gewünschte Koordinatensystem") #Koordinatensystem kann gewaehlt werden
			project_list = os.listdir(path) # Die gesamte *.psz-Liste im Zielordner wird gewaehlt und eingeladen -> Projektliste
					
			for project_name in project_list: # Fuer alle *.prz ...
				if ".PSZ" in project_name.upper(): # wenn die Datei mit *.psz endet, dann:
					doc.open(path + "/" + project_name) # oeffne das Dokument
					doc.chunk.crs = crs # Das Koordiantensystem wird eingesetzt
					chunk = doc.chunks[0] 
					chunk.matchPhotos(accuracy=PhotoScan.HighAccuracy) # FOTOS AUSRICHTEN: HOCH
					chunk.alignCameras()
					chunk.buildDenseCloud(quality=PhotoScan.LowQuality) # PUNKTWOLKE: High Auswahl -> Lowest/Low/Medium/High/UltraQuality
					PhotoScan.app.update()
					chunk.buildModel(surface=PhotoScan.Arbitrary, interpolation=PhotoScan.EnabledInterpolation, face_count=PhotoScan.MediumFaceCount) # MODELL: High Auswahl -> Low/Medium/HighFaceCount
					PhotoScan.app.update()
					chunk.buildUV(mapping=PhotoScan.GenericMapping)
					chunk.buildTexture(blending=PhotoScan.AverageBlending, color_correction=True, size=4048) # Textur Durchschnitt, Farbkorrektur an und Groeße 12000
					PhotoScan.app.update()
					chunk.detectMarkers(type=PhotoScan.CircularTarget12bit,tolerance=100) # 12 bit Marker werden mit 100 Toleranz gesucht
					PhotoScan.app.update()
					doc.save(absolute_paths = True) # speichern mit absolutem Pfad
					print("Processed project: " + project_name) 
				
				
				else:
					continue # naechstes AUTO
			app = QtGui.QApplication.instance() # Schlussfenster
			parent = app.activeWindow()
			msg = "Hat Ihnen das Skript gefallen?" # Text des Fensters
			reply = QtGui.QMessageBox.question(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No) # Ja/Nein Knöpfe
			
			if reply == QtGui.QMessageBox.No: # ist die Antwort nein, dann...
				app = QtGui.QApplication.instance()
				parent = app.activeWindow()
				msg = "...Die Festplatte wurde erfolgreich formatiert."
				reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok, QtGui.QMessageBox.No)
				if reply == QtGui.QMessageBox.No: # ist die Antwort wieder nein, dann...
					app = QtGui.QApplication.instance()
					parent = app.activeWindow()
					msg = "Das System wird jetzt entgültig heruntergefahren. Schönen Tag noch!MP"
					reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok,)
			
			print("Prozessierung erfolgreich. Grüße MP")

	def Auto_script_Workflow_medium(self):	
			import PhotoScan, os #Starte Photoscan
		
			path = PhotoScan.app.getExistingDirectory("Bitte wählen Sie den Zielordner mit den gesammelten *.psz Projekten") # Waehle den Pfad aus
			chunk = PhotoScan.app.document.chunk # der Chunk wird definiert
			print("HASP_AUTO_Skript startet MEDIUM (C) M_C_HAGNER 2015")
			doc = PhotoScan.app.document
			crs = PhotoScan.app.getCoordinateSystem("Wählen Sie das gewünschte Koordinatensystem") #Koordinatensystem kann gewaehlt werden
			project_list = os.listdir(path) # Die gesamte *.psz-Liste im Zielordner wird gewaehlt und eingeladen -> Projektliste
					
			for project_name in project_list: # Fuer alle *.prz ...
				if ".PSZ" in project_name.upper(): # wenn die Datei mit *.psz endet, dann:
					doc.open(path + "/" + project_name) # oeffne das Dokument
					doc.chunk.crs = crs # Das gewaehlte Koordiantensystem wird eingesetzt
					chunk = doc.chunks[0] 
					chunk.matchPhotos(accuracy=PhotoScan.HighAccuracy) # FOTOS AUSRICHTEN: HOCH
					chunk.alignCameras()
					chunk.buildDenseCloud(quality=PhotoScan.MediumQuality) # PUNKTWOLKE: High Auswahl -> Lowest/Low/Medium/High/UltraQuality
					PhotoScan.app.update()
					chunk.buildModel(surface=PhotoScan.Arbitrary, interpolation=PhotoScan.EnabledInterpolation, face_count=PhotoScan.HighFaceCount) # MODELL: High Auswahl -> Low/Medium/HighFaceCount
					PhotoScan.app.update()
					chunk.buildUV(mapping=PhotoScan.GenericMapping)
					chunk.buildTexture(blending=PhotoScan.AverageBlending, color_correction=True, size=9000) # Textur Durchschnitt, Farbkorrektur an und Groeße 12000
					PhotoScan.app.update()
					chunk.detectMarkers(type=PhotoScan.CircularTarget12bit,tolerance=100) # 12 bit Marker werden mit 100 Toleranz gesucht
					PhotoScan.app.update()
					doc.save(absolute_paths = True) # speichern mit absolutem Pfad
					print("Processed project: " + project_name) 
				
				
				else:
					continue # naechstes AUTO
			app = QtGui.QApplication.instance() # Schlussfenster
			parent = app.activeWindow()
			msg = "Hat Ihnen das Skript gefallen?" # Text des Fensters
			reply = QtGui.QMessageBox.question(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No) # Ja/Nein Knöpfe
			
			if reply == QtGui.QMessageBox.No: # ist die Antwort nein, dann...
				app = QtGui.QApplication.instance()
				parent = app.activeWindow()
				msg = "...Die Festplatte wurde erfolgreich formatiert."
				reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok, QtGui.QMessageBox.No)
				if reply == QtGui.QMessageBox.No: # ist die Antwort wieder nein, dann...
					app = QtGui.QApplication.instance()
					parent = app.activeWindow()
					msg = "Das System wird jetzt entgültig heruntergefahren. Schönen Tag noch!MP"
					reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok,)
			
			print("Prozessierung erfolgreich. Grüße MP")

	def Auto_script_Workflow_high(self):	
			import PhotoScan, os #Starte Photoscan
		
			path = PhotoScan.app.getExistingDirectory("Bitte wählen Sie den Zielordner mit den gesammelten *.psz Projekten") # Waehle den Pfad aus
			chunk = PhotoScan.app.document.chunk # der Chunk wird definiert
			print("HASP_AUTO_Skript HIGH startet (C) M_C_HAGNER 2015")
			doc = PhotoScan.app.document
			crs = PhotoScan.app.getCoordinateSystem("Wählen Sie das gewünschte Koordinatensystem") #Koordinatensystem kann gewaehlt werden
			project_list = os.listdir(path) # Die gesamte *.psz-Liste im Zielordner wird gewaehlt und eingeladen -> Projektliste
					
			for project_name in project_list: # Fuer alle *.prz ...
				if ".PSZ" in project_name.upper(): # wenn die Datei mit *.psz endet, dann:
					doc.open(path + "/" + project_name) # oeffne das Dokument
					doc.chunk.crs = crs # Das Koordiantensystem wird eingesetzt
					chunk = doc.chunks[0] 
					chunk.matchPhotos(accuracy=PhotoScan.HighAccuracy) # FOTOS AUSRICHTEN: HOCH
					chunk.alignCameras()
					chunk.buildDenseCloud(quality=PhotoScan.HighQuality) # PUNKTWOLKE: High Auswahl -> Lowest/Low/Medium/High/UltraQuality
					PhotoScan.app.update()
					chunk.buildModel(surface=PhotoScan.Arbitrary, interpolation=PhotoScan.EnabledInterpolation, face_count=PhotoScan.HighFaceCount) # MODELL: High Auswahl -> Low/Medium/HighFaceCount
					PhotoScan.app.update()
					chunk.buildUV(mapping=PhotoScan.GenericMapping)
					chunk.buildTexture(blending=PhotoScan.AverageBlending, color_correction=True, size=12000) # Textur Durchschnitt, Farbkorrektur an und Groeße 12000
					PhotoScan.app.update()
					chunk.detectMarkers(type=PhotoScan.CircularTarget12bit,tolerance=100) # 12 bit Marker werden mit 100 Toleranz gesucht
					PhotoScan.app.update()
					doc.save(absolute_paths = True) # speichern mit absolutem Pfad
					print("Processed project: " + project_name) 
				
				
				else:
					continue # naechstes AUTO
			app = QtGui.QApplication.instance() # Schlussfenster
			parent = app.activeWindow()
			msg = "Hat Ihnen das Skript gefallen?" # Text des Fensters
			reply = QtGui.QMessageBox.question(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No) # Ja/Nein Knöpfe
			
			if reply == QtGui.QMessageBox.No: # ist die Antwort nein, dann...
				app = QtGui.QApplication.instance()
				parent = app.activeWindow()
				msg = "...Die Festplatte wurde erfolgreich formatiert."
				reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok, QtGui.QMessageBox.No)
				if reply == QtGui.QMessageBox.No: # ist die Antwort wieder nein, dann...
					app = QtGui.QApplication.instance()
					parent = app.activeWindow()
					msg = "Das System wird jetzt entgültig heruntergefahren. Schönen Tag noch!MP"
					reply = QtGui.QMessageBox.warning(parent, 'HASP-AUTO-Skript V 1.4', msg, QtGui.QMessageBox.Ok,)
			
			print("Prozessierung erfolgreich. Grüße MP")
						
def main(): # Der Tab in Photoscan

	global doc
	doc = PhotoScan.app.document

	app = QtGui.QApplication.instance()
	parent = app.activeWindow()
	
	dlg = AUTOskriptdlg(parent)

PhotoScan.app.addMenuItem("HagnerArchaeoTools/H.A.T.-Auto HASP", main) # Tab wird eingeladen
